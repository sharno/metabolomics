using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Web.UI;
using System.Web.UI.WebControls;
using PathwaysLib.Exceptions;
using PathwaysLib.Utilities;

namespace PathwaysLib.QueryObjects
{
	/// <summary>
	/// A generic field.
	/// </summary>
    [Obsolete("This class will soon be removed and replaced by a new implementation of the new AQI library. Refer the PathwaysLib.AQI and AQILib in the future.")]
    public abstract class QField : System.Web.UI.WebControls.Panel
	{
		#region Private members
		private string parentid = string.Empty;
        private int paramid = 0;
		private int fieldid = 1;
		private string init = string.Empty;
		private QNodeType type = QNodeType.AQINode;
		#endregion

		#region Properties
		/// <summary>
		/// The ID of this field's parent, as generated by the AQI
		/// </summary>
		public string ParentID
		{
			get { return parentid; }
			set { parentid = value; }
		}

		/// <summary>
		/// The initial value of this field, if any
		/// </summary>
		new public string Init
		{
			get { return init; }
			set { init = value; }
		}

        /// <summary>
        /// The field's parameter ID
        /// </summary>
        public int ParamID
        {
            get { return paramid; }
            set { paramid = value; }
        }

		/// <summary>
		/// The field's unique instance identifier
		/// </summary>
		public int FieldID
		{
			get { return fieldid; }
			set { fieldid = value; }
		}

		/// <summary>
		/// The parent node's type; used for rendering purposes
		/// </summary>
		public QNodeType Type
		{
			get { return type; }
			set { type = value; }
		}

		/// <summary>
		/// The code this field uses for text searches; -1 means no searching is possible
		/// </summary>
		public virtual int SearchCode { get { return -1; } }
		#endregion

		#region SQL Generation Properties (read-only)
		///// <summary>
		///// The table name to use when generating SQL
		///// </summary>
		//public virtual string TableName { get { return null; } }

		/// <summary>
		/// The SQL necessary to select the appropriate value(s)
		/// </summary>
		public virtual string SelectSQL { get { return null; } }

		/// <summary>
		/// The tables this field must access
		/// </summary>
		public virtual string[] FromTables { get { return null; } }

		/// <summary>
		/// The SQL necessary to specify which field values should be selected and such
		/// TODO: Malicious SQL injection is possible here; appropriate safeguards should be checked
		/// </summary>
		/// <param name="val">The specific value to check for</param>
		/// <returns>An SQL fragment to be used in the global WHERE clause</returns>
        public abstract string WhereValueClause(string val); // { return null; }

        public virtual string[] WhereAndClauses() { return null; }

		///// <summary>
		///// The SQL necessary to link multiple fields from this node together
		///// </summary>
		//public virtual override string Key;
		#endregion

		/// <summary>
		/// Default constructor; set up any initial values
		/// </summary>
		/// <param name="initValue">The inital value</param>
		public QField( string initValue ) { init = initValue; }

		/// <summary>
		/// Sets properties for this field; automatically handled by containing classes
		/// </summary>
		/// <param name="parentID">The ID of this field's parameter</param>
		/// <param name="fieldID">The unique ID for this field</param>
		/// <param name="nodeType">The parent's node type</param>
		public virtual void SetProperties( string parentID, int paramID, int fieldID, QNodeType nodeType )
		{
			parentid = parentID;
            paramid = paramID;
			fieldid = fieldID;
			type = nodeType;
		}

		/// <summary>
		/// Triggers the parameter's search function, if one exists
		/// </summary>
		/// <param name="search">The search string</param>
		/// <returns>An ArrayList of DictionaryEntry matches, or null if the search cannot be done</returns>
		public virtual Dictionary<string, string> SearchFor( string search ) { return null; }

		/// <summary>
		/// Populates the field with items, depending on initial values and field types
		/// </summary>
		/// <returns>An ArrayList of DictionaryEntries containing value/text pairs</returns>
		protected virtual ArrayList Populate() { return null; }

		/// <summary> 
		/// Render this control to the output parameter specified.
		/// </summary>
		/// <param name="output">The HTML writer to write out to.</param>
		protected override void Render( HtmlTextWriter output )
		{
			string baseID = parentid + "-" + fieldid;

			// Render the custom field
			if( SearchCode > -1 )
			{
                // auto-completing textbox

                /*
                
				TextBox fieldText = new TextBox();
				fieldText.ID = baseID + ";Val";
				fieldText.CssClass = "aqiselect aqitextfield";

				//fieldText.Attributes.Add( "onkeyup", "InSearch.QueryServer(this, " + SearchCode.ToString() +
				//	", " + FieldID.ToString() + ")" );

				fieldText.Attributes.Add( "onchange", "AQI.ChangeField('" + baseID + "', this.value)" );
				fieldText.Text = Init;
				fieldText.RenderControl( output );

                // write javascript here to run on client after html is loaded by prototype.js's Ajax.Updater call

//                output.WriteLine(@"
//			<script type=""text/javascript"">
//                function ChangeField()
//                {
//                    alert('change field');
//                    AQI.ChangeField('" + baseID + @"', this.value);
//                }
//
//				ac = new AutoComplete('" + baseID + @";Val', 'JSONData.aspx?op=1&id=0&xml=1&str=',{delay: .1, threshold: 1, onSelect: ChangeField});
//			</script>
//            ");*/
                output.WriteLine("<div id=\"" + baseID + ";ValDiv\"></div>");
                output.WriteLine(string.Format(@"
                    <script type=""text/javascript""> 
                        var myCombo = dojo.widget.createWidget(""ComboBox"", {{dataUrl: ""{4}/Web/JSONData.aspx?op={1}&str=%{{searchString}}&param={2}&id={3}&quote=0"", maxListLength: ""10"", name: ""{0};Val"", mode: ""remote"", searchType: ""SUBSTRING"", autoComplete:false}}); 
                        myCombo.domNode.id = ""{0};Val"";
                        myCombo.domNode.isDojo = true;
                        myCombo.domNode.dojoObj = myCombo;
                        document.getElementById(""{0};ValDiv"").appendChild(myCombo.domNode); 
                        var firstField = document.getElementById(""{0};Val""); 
                        firstField.cloneField = function(newId) 
                        {{
                            var newCombo = dojo.widget.createWidget(""ComboBox"", {{dataUrl: ""{4}/Web/JSONData.aspx?op={1}&str=%{{searchString}}&param={2}&id={3}&quote=0"", maxListLength: ""10"", name: newId, mode: ""remote"", searchType: ""SUBSTRING"", autoComplete:false}}); 
                            newCombo.domNode.id = newId;
                            newCombo.domNode.isDojo = true;
                            newCombo.domNode.dojoObj = newCombo;
                            return newCombo.domNode;
                        }}
                        
                    </script>", baseID, SearchCode.ToString(), paramid, fieldid, LinkHelper.PathwaysWebBaseUrl));

                //myCombo.domNode.changeField = function(id, val)   {{
                //            alert(""reached"");
                //            var paramId = id.split(""-"");
                //            var fieldId = paramId.pop();
                //            paramId = paramId.join(""-"");
                		
                //            var param = findElement(paramId, ""param"");
                //            var field = findElement(id, ""field"");
                //            if(!param || !field) throw(""Changing '""+id+""' failed because some of its pieces are missing."");
                //                field.val = val;
		
                //            // Untoggle the parameter if the selected value is non-empty
                //            if(val.length && param.inc) param.toggle();
                //        }}
			}
			else
			{
                //TODO: if Populate returns no entries, make this a non-autocompleting textbox!

				ListBox fieldList = new ListBox();
				fieldList.Rows = 1;
				fieldList.ID = baseID + ";Val";
				fieldList.CssClass = "aqiselect";
				fieldList.Attributes.Add( "onchange", "AQI.ChangeField('" + baseID + "', this.value)" );
				fieldList.Items.Add( new ListItem( "", "" ) );
				foreach( DictionaryEntry de in Populate() )
				{
					ListItem newItem = new ListItem();
					newItem.Value = de.Key.ToString();
					newItem.Text = de.Value.ToString();
					newItem.Selected = de.Key.ToString() == init;
					fieldList.Items.Add( newItem );
				}

				fieldList.RenderControl( output );
			}
		}
	}
}