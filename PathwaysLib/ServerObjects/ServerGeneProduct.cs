#region Using Declarations
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

using PathwaysLib.SoapObjects;
using PathwaysLib.ServerObjects;
using PathwaysLib.Exceptions;
using PathwaysLib.GraphObjects;
#endregion

namespace PathwaysLib.ServerObjects
{	
	
	#region Document Comments
	/// <sourcefile>
	///		<project>Pathways</project>
	///		<filepath>PathwaysLib/Server/ServerGeneProduct.cs</filepath>
	///		<creation>2005/06/30</creation>
	///		<author>
	///			<name>Brandon Evans</name>
	///			<initials>bse</initials>
	///			<email>brandon.evans@case.edu</email>
	///		</author>
	///		<contributors>
	///			<contributor>
	///				<name>Michael F. Starke</name>
	///				<initials>mfs</initials>
	///				<email>michael.starke@case.edu</email>
	///			</contributor>
	///			<contributor>
	///				<name>Brendan Elliott</name>
	///				<initials>BE</initials>
	///				<email>bxe7@cwru.edu</email>
	///			</contributor>
	///		</contributors>
	///		<cvs>
	///			<cvs_author>$Author: mustafa $</cvs_author>
	///			<cvs_date>$Date: 2008/05/16 21:15:53 $</cvs_date>
	///			<cvs_header>$Header: /var/lib/cvs/PathCase_SystemsBiology/PathwaysLib/ServerObjects/ServerGeneProduct.cs,v 1.1 2008/05/16 21:15:53 mustafa Exp $</cvs_header>
	///			<cvs_branch>$Name:  $</cvs_branch>
	///			<cvs_revision>$Revision: 1.1 $</cvs_revision>
	///		</cvs>
	///</sourcefile>
	/// <summary>
	/// Encapsulates database access related to biological gene products.
	/// </summary>
	#endregion
	public abstract class ServerGeneProduct : ServerMolecularEntity, IGraphGeneProduct
	{

		#region Constructor, Destructor, ToString
		/// <summary>
		/// Default constructor
		/// </summary>
		protected ServerGeneProduct ( )
		{
		}

//(AC) This constructor never worked!
//		/// <summary>
//		/// Creation constructor
//		/// </summary>
//		/// <param name="name"></param>
//		/// <param name="type"></param>
//		/// <param name="molecular_entity_notes"></param>
//		/// <param name="gene_product_notes"></param>
//        public ServerGeneProduct (string name, string type, string molecular_entity_notes, string gene_product_notes)
//            : base(name, type, molecular_entity_notes)
//        {
//            // not yet in DB, so create empty row
//            __GeneProductRow = new DBRow( __TableName );
//
//            this.ID = base.ID; // get ID generated by base class
//            this.Type = type; // type is used by both this class and MolecularEntity with the same value (i.e. table name)
//            this.GeneProductNotes = gene_product_notes;
//        }

		/// <summary>
		/// Constructor for server gene product wrapper.
		/// </summary>
		/// <remarks>
		/// This constructor creates a ServerGeneProduct object from a
		/// SoapGeneProduct object.
		/// </remarks>
		/// <param name="data">
		/// A SoapGeneProduct object from which to construct the
		/// ServerGeneProduct object.
		/// </param>
		/// <param name="type"></param>
		public ServerGeneProduct ( SoapGeneProduct data, string type) 
            : base ( (SoapMolecularEntity)data, type)
		{
			// (BE) setup database row
			switch(data.Status)
			{
				case ObjectStatus.Insert:
					// not yet in DB, so create empty row
					__GeneProductRow = new DBRow( __TableName );
					break;
				case ObjectStatus.ReadOnly:
				case ObjectStatus.Update:
				case ObjectStatus.NoChanges:
					// need to load existing row first so update works properly
					__GeneProductRow = LoadRow(data.ID);
					break;
				default:
					throw new DataModelException("Cannot create ServerObject from invalid SoapObject.");
			}

			// (BE) this call needs to come from the derived class, after all records are created!
			//if (data.Status != ObjectStatus.ReadOnly)
			//	UpdateFromSoap(data);
		}

		/// <summary>
		/// Constructor for server gene product wrapper.
		/// </summary>
		/// <remarks>
		/// This constructor creates a ServerGeneProduct object from a
		/// data row.
		/// </remarks>
		/// <param name="geneProductRow">
		/// DataSet to load into the object.
		/// </param>
		public ServerGeneProduct ( DBRow geneProductRow ) : base ( ServerMolecularEntity.LoadRow(geneProductRow.GetGuid("id") ) )
		{
			// (mfs)
			// setup object
			__GeneProductRow = geneProductRow;
		}

		/// <summary>
		/// Constructor for server gene product wrapper.
		/// </summary>
		/// <remarks>
		/// This constructor creates a ServerGeneProduct object from a
		/// base class data row and the derived class data row.
		/// </remarks>
		/// <param name="geneProductRow">
		/// DBRow to load into the object.
		/// </param>
		/// <param name="molecularEntityRow"></param>
        public ServerGeneProduct ( DBRow geneProductRow, DBRow molecularEntityRow ) : base ( molecularEntityRow )
        {
            // (mfs)
            // setup object
            __GeneProductRow = geneProductRow;
        }

		/// <summary>
		/// Destructor for the ServerGeneProduct class.
		/// </summary>
		/// <remarks>
		/// Call base constructor to ensure proper updates.
		/// </remarks>
		~ServerGeneProduct()
		{
		}
		#endregion


		#region Member Variables
		private static readonly string __TableName = "gene_products";

        /// <summary>
        /// The contains the data for the derived class table.  Data from
        /// the base class table is maintained by the server base class.
        /// </summary>
        protected DBRow __GeneProductRow;
		#endregion


		#region Properties
		/// <summary>
		/// Get/set the GeneProduct ID.
		/// </summary>
		public override Guid ID
		{
			get
			{
				return __GeneProductRow.GetGuid("id");
			}
			set
			{
                base.ID = value; // (BE) update base class ID as well
                if (__GeneProductRow != null)
                    __GeneProductRow.SetGuid("id", value); 
            }
		}

		/// <summary>
		/// Get/set the GeneProduct notes.
		/// </summary>
		public string GeneProductNotes
		{
			get
			{
				return __GeneProductRow.GetString("notes");
			}
			set
			{
				__GeneProductRow.SetString("notes", value);
			}
		}

/*	
 * 
//		/// <summary>
//		/// Get/set the GeneProduct type.
//        /// Only modifiable by derived classes,
//        /// as this property is used for inheritance!
//		/// </summary>
//		protected override string Type
//		{
//			get
//			{
//				return __GeneProductRow.GetString("type");
//			}
//			set
//			{
//                base.Type = value; // (BE) update base class type as well
//                if (__GeneProductRow != null)
//                    __GeneProductRow.SetString("type", value); 
//			}
//		}
        */
		#endregion


		#region Methods

		/// <summary>
		/// Delete the gene product from gene_products table and the associated tables
		/// </summary>
		public override void Delete()
		{
			// (sfa) Delete the basic_molecules tuples
			DBWrapper.Instance.ExecuteNonQuery("DELETE FROM gene_products WHERE id = @id"
				, "@id", SqlDbType.UniqueIdentifier, this.ID);

			// (sfa) Delete from gene_encodings table
			DBWrapper.Instance.ExecuteNonQuery("DELETE FROM gene_encodings WHERE gene_product_id = @id"
				, "@id", SqlDbType.UniqueIdentifier, this.ID);

			base.Delete ();
		}

		/// <summary>
		/// Returns a representation of this object suitable for being
		/// sent to a client via SOAP.
		/// </summary>
		/// <returns>
		/// A SoapObject object capable of being passed via SOAP.
		/// </returns>
		public override SoapObject PrepareForSoap ( SoapObject derived )
		{
            // this is an abstract class, so this must be created by the derived class
            SoapGeneProduct retval = (SoapGeneProduct)derived;

            // (BE) fill base class properties
            base.PrepareForSoap(retval);

			retval.ID   = this.ID;
			retval.GeneProductNotes = this.GeneProductNotes;
			//retval.Type = this.Type; // this comes from the derived SoapObject, as it is part of the inheritance implementation

			retval.Status = ObjectStatus.NoChanges;

			return retval;
		}

		/// <summary>
		/// Consumes a SoapObject object and updates the object
		/// from it.
		/// </summary>
		/// <param name="o">
		/// The SoapObject object to update from, potentially containing
		/// changes to the object.
		/// </param>
		protected override void UpdateFromSoap ( SoapObject o )
		{
            // set base class properties
            base.UpdateFromSoap(o);
            
            SoapGeneProduct gp = o as SoapGeneProduct;

            // (BE) use the ID set in the base class or the new ID generated by the base class
            this.ID = base.ID;

			this.GeneProductNotes = gp.GeneProductNotes;
			//this.Type = base.Type; // use type set by base class
		}

        /// <summary>
        /// Update the base class's data row, then the derived class's row
        /// </summary>
        public override void UpdateDatabase()
        {
            base.UpdateDatabase ();
            __GeneProductRow.UpdateDatabase();
        }

		#region Encodes Relation
		/// <summary>
		/// Adds an entry in the gene_encodings table
		/// </summary>
		/// <param name="gene_id"></param>
		public void AddToGeneEncoding( Guid gene_id )
		{
			ServerGene.AddGeneEncoding( gene_id, this.ID );
		}

		/// <summary>
		/// Removes an entry in the gene_encodings table
		/// </summary>
		/// <param name="gene_id"></param>
		public void RemoveFromGeneEncoding( Guid gene_id )
		{
			ServerGene.RemoveGeneEncoding( gene_id, this.ID );
		}

		/// <summary>
		/// This will be used by ServerGeneProduct
		/// </summary>
		/// <returns>
		/// Returns all of the processes for this gene product
		/// </returns>
		public ServerGene[] GetAllGenes( )
		{
			SqlCommand command = new SqlCommand(
				@"SELECT g.*
					FROM genes g
					INNER JOIN gene_encodings ge ON g.[id] = ge.gene_id
					WHERE ge.gene_product_id = @id;" );
			SqlParameter ident = new SqlParameter( "@id", SqlDbType.UniqueIdentifier );
			ident.SourceVersion = DataRowVersion.Original;
			ident.Value = this.ID;
			command.Parameters.Add( ident );

			DataSet[] ds = new DataSet[0];
			DBWrapper.LoadMultiple( out ds, ref command );

			ArrayList results = new ArrayList();
			foreach ( DataSet d in ds )
			{
				results.Add( new ServerGene( new DBRow(d) ) );
			}

			return ( ServerGene[] ) results.ToArray( typeof( ServerGene ) );
		}


		#endregion

		#region Catalyzes Relation
		/// <summary>
		/// Adds this gene product to a given process, an ec number may also be assigned
		/// </summary>
		/// <param name="process_id"></param>
		/// <param name="orgGroupId"></param>
		/// <param name="ec_number"></param>
		public void AddToProcess (Guid process_id, Guid orgGroupId, string ec_number)
		{
			ServerCatalyze.AddGeneProductToProcess( this.ID, process_id, orgGroupId, ec_number );
		}

		/// <summary>
		/// Removes the relation between this gene product and the given process
		/// </summary>
		/// <remarks>
		/// In order to specify a row in the gene_products_and_processes, all three
		/// fields (gene_product_id, process_id, ec_number) must be given.
		/// </remarks>
		/// <param name="process_id"></param>
		/// <param name="orgGroupId"></param>
		/// <param name="ec_number"></param>
		public void RemoveFromProcess(Guid process_id, Guid orgGroupId, string ec_number)
		{
			ServerCatalyze.RemoveGeneProductFromProcess( this.ID, process_id, orgGroupId, ec_number);
		}

		/// <summary>
		/// Get all processes
		/// </summary>
		/// <returns>
		/// Returns all of the processes this is involved in
		/// </returns>
		public new ServerProcess[] GetAllProcesses( )
		{
			return ServerCatalyze.GetAllProcessesForGeneProduct( this.ID );
		}

		/// <summary>
		/// Get the ec number for this enzyme in the given process
		/// </summary>
		/// <param name="processId"></param>
		/// <returns></returns>
		public ServerECNumber GetECNumberInProcess ( Guid processId )
		{
			return ServerCatalyze.GetECNumberForGeneProductAndProcess( processId, this.ID );
		}

        /// <summary>
        /// Get the ec number for this organism in the given process
        /// </summary>
        /// <param name="processId"></param>
        /// <param name="orgId"></param>
        /// <returns></returns>
		public ServerECNumber GetECNumberInProcessForOrganism ( Guid processId, Guid orgId)
		{
			return ServerCatalyze.GetECNumberForGeneProductandProcessInOrganism( processId, this.ID, orgId);
		}
		#endregion

		/// <summary>
		/// Gets the organism that contains the gene encoding this enzyme.
		/// </summary>
		/// <returns>
		/// an array of the interface for organisms</returns>
		public ServerOrganismGroup[] GetAllOrganisms( )
		{
			return ServerGeneProduct.GetAllOrganismsForGeneProduct( this.ID );
		}

		#region ADO.NET SqlCommands


		/// <summary>
		/// Required function for setting up the SqlCommands for ADO.NET.
		/// </summary>
		protected override void SetSqlCommandParameters ( )
		{
            // (BE) set commands for base class's DBRow
            base.SetSqlCommandParameters();

			// (mfs)
			// add the INSERT command
			SqlCommand Insert = new SqlCommand( "INSERT INTO " + __TableName + " (id, notes) VALUES (@i_id, @i_notes);" );
			SqlParameter i_id = new SqlParameter( "@i_id", SqlDbType.UniqueIdentifier, 32, "id" );
			i_id.Value = ID;
			Insert.Parameters.Add( i_id );
			
			SqlParameter i_notes = new SqlParameter( "@i_notes", SqlDbType.Text, 255, "notes" );
			i_notes.Value = GeneProductNotes;
			Insert.Parameters.Add( i_notes );
			__GeneProductRow.ADOCommands["insert"] = Insert;

			// (mfs)
			// add the SELECT command
			SqlCommand Select = new SqlCommand( "SELECT * FROM " + __TableName + " WHERE id = @s_id;" );
			SqlParameter s_id = new SqlParameter( "@s_id", SqlDbType.UniqueIdentifier, 32, "id");
			s_id.SourceVersion = DataRowVersion.Original;
			s_id.Value = ID;
			Select.Parameters.Add( s_id );
			__GeneProductRow.ADOCommands["select"] = Select;

			// (mfs)
			// add the UPDATE command
			SqlCommand Update   = new SqlCommand( "UPDATE " + __TableName + " SET notes = @u_notes WHERE id = @u_id;" );
			SqlParameter u_notes = new SqlParameter( "@u_notes", SqlDbType.Text, 255, "notes" );
			u_notes.Value = GeneProductNotes;
			Update.Parameters.Add( u_notes );
			
			SqlParameter u_id   = new SqlParameter( "@u_id", SqlDbType.UniqueIdentifier, 32, "id");
			u_id.SourceVersion = DataRowVersion.Original;
			u_id.Value = ID;
			Update.Parameters.Add( u_id );
			__GeneProductRow.ADOCommands["update"] = Update;

			// (mfs)
			// add the DELETE command
			SqlCommand Delete = new SqlCommand ( "DELETE FROM " + __TableName + " WHERE id = @d_id;" );
			SqlParameter d_id = new SqlParameter( "@d_id", SqlDbType.UniqueIdentifier, 32, "id");
			d_id.SourceVersion = DataRowVersion.Original;
			d_id.Value = ID;
			Delete.Parameters.Add( d_id );
			__GeneProductRow.ADOCommands["delete"] = Delete;

		}
		#endregion
		#endregion


		#region Static Methods
		/// <summary>
		/// Return all gene products from the system.
		/// </summary>
		/// <returns>
		/// Array of SoapGeneProduct objects ready to be sent via SOAP.
		/// </returns>
		public static ServerGeneProduct[] AllGeneProducts ( )
		{
			SqlCommand command = new SqlCommand( "SELECT * FROM " + __TableName + ";" );
			
			DataSet[] ds = new DataSet[0];
			DBWrapper.LoadMultiple( out ds, ref command );

			ArrayList results = new ArrayList();
			foreach ( DataSet d in ds )
			{
				results.Add( LoadDerived( new DBRow (d) ) );
			}

			return ( ServerGeneProduct[] ) results.ToArray( typeof( ServerGeneProduct ) );
		}

		/// <summary>
		/// Return a gene product with given ID.
		/// </summary>
		/// <param name="id">
		/// The Guid of the desired gene product.
		/// </param>
		/// <returns>
		/// SoapGeneProduct object ready to be sent via SOAP.
		/// </returns>
		public new static ServerGeneProduct Load ( Guid id )
		{
			return ServerGeneProduct.LoadDerived( LoadRow ( id ), ServerMolecularEntity.LoadRow ( id ) );
		}

		/// <summary>
		/// Calls LoadDerived on LoadRow on the base class id
		/// </summary>
		/// <param name="molecularEntityRow"></param>
		/// <returns>
		/// A ServerGeneProduct that corresponds to the given molecular entity row
		/// </returns>
        public static ServerGeneProduct LoadFromBaseRow ( DBRow molecularEntityRow )
        {
            Guid id = molecularEntityRow.GetGuid("id");
            DBRow geneProductRow;
			if (ServerGeneProduct.Exists(id))
			{
				geneProductRow = LoadRow(id);
			}
			else
			{
				geneProductRow = CreateFromMolecularEntity(molecularEntityRow);
			}

            return ServerGeneProduct.LoadDerived(geneProductRow, molecularEntityRow);
        }

        /// <summary>
		/// Loads a concrete instance of a derived class from the
		/// corresponding 
        /// </summary>
        /// <param name="geneProductRow"></param>
        /// <param name="molecularEntityRow"></param>
        /// <returns></returns>
        protected static ServerGeneProduct LoadDerived ( DBRow geneProductRow, DBRow molecularEntityRow )
        {
            // (BE) since MolecularEntity is abstract, load the correct type instead
            switch(MolecularEntityTypeManager.GetTypeName(molecularEntityRow.GetInt("type_id")))
            {                
                case "proteins": return ServerProtein.LoadFromBaseRow(geneProductRow, molecularEntityRow); 
                case "rnas": return ServerRNA.LoadFromBaseRow(geneProductRow, molecularEntityRow); 
            }
            throw new Exception("Unexpected derived class type!");
        }

		/// <summary>
		/// Return the dataset for a gene product with a given ID.
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected new static DBRow LoadRow ( Guid id )
		{
			SqlCommand command = new SqlCommand( "SELECT * FROM " + __TableName + " WHERE id = @id;" );
			SqlParameter ident = new SqlParameter( "@id", SqlDbType.UniqueIdentifier );
			ident.SourceVersion = DataRowVersion.Original;
			ident.Value = id;
			command.Parameters.Add( ident );

			DataSet ds = new DataSet();
			DBWrapper.LoadSingle( out ds, ref command );
			return new DBRow(ds);
		}

		/// <summary>
		/// Load a ServerGeneProduct from a DBRow.
		/// </summary>
		/// <param name="geneProductRow">
		/// The source row.
		/// </param>
		/// <returns>
		/// A gene product with the data supplied by the source row.
		/// </returns>
        public static ServerGeneProduct LoadFromRow ( DBRow geneProductRow )
        {
            return ServerGeneProduct.LoadDerived(geneProductRow, ServerMolecularEntity.LoadRow( geneProductRow.GetGuid("id") ) );
        }

		/// <summary>
		/// Returns true if the given gene product exists
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
        public new static bool Exists( Guid id )
        {
            SqlCommand command = DBWrapper.BuildCommand(
                "SELECT * FROM " + __TableName + " WHERE id = @id;",
                "@id", SqlDbType.UniqueIdentifier, id);

            DataSet[] ds;
            if (DBWrapper.LoadMultiple(out ds, ref command) < 1)
                return false;
            return true;
        }

		/// <summary>
		/// Create a new gene product row from a molecular entity row
		/// </summary>
		/// <param name="molecularEntityRow"></param>
		/// <returns></returns>
        public static DBRow CreateFromMolecularEntity(DBRow molecularEntityRow)
        {
            // create the new row in the protein table, using the ID from the other rows to fix 
            DBRow geneProductRow = new DBRow( __TableName );

            // set row values
            geneProductRow.SetGuid("id", molecularEntityRow.GetGuid("id"));
            
            // save changes -- saved in derived class
            //geneProductRow.UpdateDatabase();
            return geneProductRow;
        }

		/// <summary>
		/// Given an enzyme (gene product), gets the organisms that contains the gene encoding the enzyme.
		/// </summary>
		/// <param name="geneProductId"></param>
		/// <returns>
		/// An array of ServerOrganism's
		/// </returns>
		public static ServerOrganismGroup[] GetAllOrganismsForGeneProduct(Guid geneProductId)
		{
			SqlCommand command = DBWrapper.BuildCommand(
				@"SELECT og.*
					FROM organism_groups og
					WHERE og.id IN (
						SELECT org.id
							FROM organism_groups org
							INNER JOIN catalyzes c ON org.id = c.organism_group_id
							WHERE c.gene_product_id = @gene_product_id)
					ORDER BY og.scientific_name",
				"@gene_product_id", SqlDbType.UniqueIdentifier, geneProductId);
			
			return ServerOrganismGroup.LoadMultiple(command);
		}

		#endregion

		#region Additional Queries

		/// <summary>
		/// Returns all pathways that involve processes related to gene products
		///	 using the gene_products_and_processes table
		/// </summary>
		/// <param name="geneProductId"></param>
		/// <returns></returns>
		public static ServerPathway[] GetAllPathwaysForGeneProduct ( Guid geneProductId )
		{
            //TODO: FIXME
            SqlCommand command = DBWrapper.BuildCommand( 
                @"SELECT p.* 
                    FROM pathways p 
                    WHERE p.id IN ( SELECT pp.pathway_id 
                                    FROM pathway_processes pp
									INNER JOIN catalyzes gpp ON pp.process_id = gpp.process_id 
                                    WHERE gpp.gene_product_id = @gene_product_id);",
				"@gene_product_id", SqlDbType.UniqueIdentifier, geneProductId );
			
			ArrayList results = new ArrayList();
			DataSet[] ds;
			if (DBWrapper.LoadMultiple(out ds, ref command) > 0)
			{
				foreach(DataSet d in ds)
				{
					results.Add(new ServerPathway( new DBRow( d ) ) );
				}
			}
			return (ServerPathway[])results.ToArray(typeof(ServerPathway));
		}

		#endregion

	} // End class

} // End namespace


#region Change Log
//----------------------------- END OF SOURCE ----------------------------

/*------------------------------- Change Log -----------------------------
	$Id: ServerGeneProduct.cs,v 1.1 2008/05/16 21:15:53 mustafa Exp $
	$Log: ServerGeneProduct.cs,v $
	Revision 1.1  2008/05/16 21:15:53  mustafa
	*** empty log message ***
	
	Revision 1.3  2008/03/13 19:42:52  divya
	*** empty log message ***
	
	Revision 1.2  2006/10/19 21:03:36  brendan
	New graph drawing code ... performs bulk-loading of server objects to reduce the number of queries and filling an object cache.  Also provides an interface for alternative data sources (i.e. XML biopax doc).  Other misc bug fixes.
	
	Revision 1.1  2006/07/31 19:37:43  greg
	Ported from VS7 to VS8.  The system should compile, but there are definitely issues with the site that are still at large.
	
	Revision 1.27  2006/06/30 20:02:38  greg
	There have been some very big changes here lately...
	
	 - Query logger
	The DBWrapper class now has support for logging queries in a format that you can import into Excel, etc. for analysis.  There are some Web.config lines you'll have to add, though.
	
	 - JavaScript redirects
	The dropdown list on the main browser bar uses JavaScript for redirects.  Yay.
	
	 - Visual issues
	There were several unresolved visual issues (mostly stemming from the way IE and Firefox render pages differently), but most of them should now be resolved.
	
	 - Ajax browsing
	The biggest part of this update involves Ajax.  All pages load significantly faster now, and data requests are made asynchronously.  The fine details about which panels will start open by default and everything can be worked out later... but for now it appears that everything is working nicely.
	
	Revision 1.26  2006/06/13 01:52:04  ali
	*** empty log message ***
	
	Revision 1.25  2006/06/05 22:40:08  brandon
	Made DisplayGeneDetail functional.  added function to ServerGene to get all homologues.
	Fixed a bug in ServerGeneProduct.GetAllOrganisms() so it now returns distinct organisms (there were duplicates before)
	
	Revision 1.24  2006/05/23 18:29:32  greg
	Many old SQL queries were updated/optimized, and a bug that causes the system to crash when trying to navigate after viewing the details of an object through the Java applet is also fixed.  This required some semi-substantial modifications to LinkHelper.cs and SearchPagination.ascx.cs to allow for a slightly different method of dealing with query parameters.
	
	Revision 1.23  2006/05/18 19:01:47  greg
	 - Pathway menu expansion
	When going through the pathways menu in the control bar, the menu that should be open isn't.  Now it is.
	
	 - SQL injection stuff
	More queries were rewritten to prevent SQL injection, and some were also rewritten to be a little more aesthetically pleasing.
	
	 - Finding SQL bugs
	SQL bugs that have arisen as a result of schema changes are still being checked for.  Any that I find are being sent to Ali for rewriting and reintegration.
	
	Revision 1.22  2006/05/12 21:25:46  ali
	For processes no organisms were listed. This was due to the fact that all the functions returning organism lists contained queries that join organism and organism group tables which can technically work only for mouse, and human or real organisms. Now all such methods operate on organism group table as it contains all organisms and organism groups.
	
	Revision 1.21  2006/05/11 21:18:33  brendan
	Fixed numerous bugs, basic browsing starting to work again
	
	Revision 1.20  2006/05/11 15:47:20  brendan
	Removed remaining SearchMethod magic strings; refactored OrgMeta back into ServerOrganismGroup, fixed many PathwaysLib warnings.
	
	Revision 1.19  2006/05/10 02:40:17  ali
	Server Objects have been modified to make them compliant with the recent schema changes concerning the addition of several entity_type tables into the database.
	
	Revision 1.18  2006/04/21 17:37:29  michael
	*** empty log message ***
	
	Revision 1.17  2006/04/12 20:22:11  brian
	*** empty log message ***
	
	Revision 1.16.8.2  2006/03/23 18:42:11  brian
	ServerOrganism should work correctly now
	
	Revision 1.16.8.1  2006/03/22 19:48:06  brian
	*** empty log message ***
	
	Revision 1.16  2005/11/07 17:28:26  brendan
	New generic graph building code, exposed via a new web service call.
	
	Revision 1.15  2005/10/31 06:10:17  fatih
	*** empty log message ***
	
	Revision 1.14  2005/10/26 17:53:57  michael
	Updating doc comments
	
	Revision 1.13  2005/07/20 04:05:34  brandon
	Added the class EntityRoleProcessAndPathway which is used by ServerMolecularEntity.
	Fixed a bug in GetAllGenes() in ServerGeneProduct.cs
	Created ConnectedPathways.cs to help with pathway links, but it doesn't work yet.
	
	Revision 1.12  2005/07/19 18:15:36  brandon
	Added a bunch of XML comments, also changed get all processes for pathway function to remove duplicates
	
	Revision 1.11  2005/07/18 20:31:13  brandon
	changed GetAllPathways in ServerMolecularEntity.cs to work for all types of molecular entity.  Added a static method to ServerGene to get all pathways for gene products that the gene encodes
	
	Revision 1.10  2005/07/18 19:18:12  brandon
	Added another test file, Brendan fixed his Protein table fix thing, and added a query to geneProducts to override the GetAllPathways in ServerMolecularEntity
	
	Revision 1.9  2005/07/15 22:28:00  brendan
	Fix to automatically generate missing protein table entries from entries in molecular entities.
	
	Revision 1.8  2005/07/15 21:02:00  brandon
	added more queries
	
	Revision 1.7  2005/07/13 22:14:12  brandon
	bug fixes, updated ServerBasicMolecule for inheritance, but it's not finished so don't use it yet.
	
	Revision 1.6  2005/07/13 16:41:45  brandon
	Added a bunch of XML comments where they were missing.
	Changed ServerCatalyze so that it loads a single object from a given ec number instead of an array.
	
	Revision 1.5  2005/07/11 22:28:57  brendan
	Added inheritance support for GeneProduct and Protein, but they are not fully tested yet.
	
	Revision 1.4  2005/07/08 20:36:39  brandon
	changed LoadDataSet to LoadRow in all the Server objects
	
	Revision 1.3  2005/07/08 19:32:05  brandon
	fixed ServerCatalyze, sort of,  and uh, this project builds now
	
	Revision 1.2  2005/07/07 19:42:19  brandon
	did more on the catalyzes relation, don't know exactly how to get EC# more involved (?)
	
	Revision 1.1  2005/06/30 19:46:32  brandon
	added a bunch of new classes for all the boxed on the ER diagram, even the ones that only have an id attribute
	

		
------------------------------------------------------------------------*/
#endregion