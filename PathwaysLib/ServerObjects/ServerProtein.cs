#region Using Declarations
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

using PathwaysLib.SoapObjects;
using PathwaysLib.ServerObjects;
using PathwaysLib.Exceptions;
#endregion

namespace PathwaysLib.ServerObjects
{	
	
	#region Document Comments
	/// <sourcefile>
	///		<project>Pathways</project>
	///		<filepath>PathwaysLib/Server/ServerProtein.cs</filepath>
	///		<creation>2005/06/30</creation>
	///		<author>
	///			<name>Brendan Elliott</name>
	///			<initials>BE</initials>
	///			<email>bxe7@cwru.edu</email>
	///		</author>
	///		<contributors>
	///			<contributor>
	///				<name>Michael F. Starke</name>
	///				<initials>mfs</initials>
	///				<email>michael.starke@case.edu</email>
	///			</contributor>
	///			<contributor>
	///				<name>Brandon Evans</name>
	///				<initials>bse</initials>
	///				<email>brandon.evans@case.edu</email>
	///			</contributor>
	///			<contributor>
	///				<name>Suleyman Fatih Akgul</name>
	///				<initials>sfa</initials>
	///				<email>fatih@case.edu</email>
	///			</contributor>
	///			<contributor>
	///				<name>Gokhan Yavas</name>
	///				<initials>gy</initials>
	///				<email>gokhan.yavas@case.edu</email>
	///			</contributor>
	///		</contributors>
	///		<cvs>
	///			<cvs_author>$Author: mustafa $</cvs_author>
	///			<cvs_date>$Date: 2008/05/16 21:15:53 $</cvs_date>
	///			<cvs_header>$Header: /var/lib/cvs/PathCase_SystemsBiology/PathwaysLib/ServerObjects/ServerProtein.cs,v 1.1 2008/05/16 21:15:53 mustafa Exp $</cvs_header>
	///			<cvs_branch>$Name:  $</cvs_branch>
	///			<cvs_revision>$Revision: 1.1 $</cvs_revision>
	///		</cvs>
	///</sourcefile>
	/// <summary>
	/// Encapsulates database access related to proteins.
	/// </summary>
	#endregion
	public class ServerProtein : ServerGeneProduct
	{

		#region Constructor, Destructor, ToString
		/// <summary>
		/// Default constructor
		/// </summary>
		protected ServerProtein ( )
		{
		}

//		/// <summary>
//		/// Creation constructor
//		/// </summary>
//		/// <param name="name"></param>
//		/// <param name="molecular_entity_notes"></param>
//		/// <param name="gene_product_notes"></param>
//        public ServerProtein (string name, string molecular_entity_notes, string gene_product_notes)
//            : base(name, "proteins", molecular_entity_notes, gene_product_notes)
//        {
//            // not yet in DB, so create empty row
//            __ProteinRow = new DBRow( __TableName );
//             
//            this.ID = base.ID; // get ID generated by base class
//        }

		/// <summary>
		/// Constructor for server protein wrapper.
		/// </summary>
		/// <remarks>
		/// This constructor creates a ServerProtein object from a
		/// SoapProtein object.
		/// </remarks>
		/// <param name="data">
		/// A SoapProtein object from which to construct the
		/// ServerProtein object.
		/// </param>
		public ServerProtein ( SoapProtein data )
             : base ( (SoapGeneProduct)data, "proteins")
		{
			// (BE) setup database row
			switch(data.Status)
			{
				case ObjectStatus.Insert:
					// not yet in DB, so create empty row
					__ProteinRow = new DBRow( __TableName );
					break;
				case ObjectStatus.ReadOnly:
				case ObjectStatus.Update:
				case ObjectStatus.NoChanges:
					// need to load existing row first so update works properly
					__ProteinRow = LoadRow(data.ID);
					break;
				default:
					throw new DataModelException("Cannot create ServerObject from invalid SoapObject.");
			}

			// (BE) get potential updates from Soap object, unless it's supposed to be read only
			if (data.Status != ObjectStatus.ReadOnly)
				UpdateFromSoap(data);
		}

		/// <summary>
		/// Constructor for server protein wrapper.
		/// </summary>
		/// <remarks>
		/// This constructor creates a ServerProtein object from a
		/// DataSet.
		/// </remarks>
		/// <param name="proteinRow">
		/// DataSet to load into the object.
		/// </param>
		public ServerProtein ( DBRow proteinRow ) 
            : base ( ServerGeneProduct.LoadRow(proteinRow.GetGuid("id") ) )
		{
			// (mfs)
			// setup object
			__ProteinRow = proteinRow;
		}

		/// <summary>
		/// Constructor for ServerProteinObject given a base class row and derived class row
		/// </summary>
		/// <param name="proteinRow"></param>
		/// <param name="geneProductRow"></param>
		/// <param name="molecularEntityRow"></param>
        public ServerProtein ( DBRow proteinRow, DBRow geneProductRow, DBRow molecularEntityRow ) 
            : base ( geneProductRow, molecularEntityRow )
        {
            // (mfs)
            // setup object
            __ProteinRow = proteinRow;
        }

		/// <summary>
		/// Destructor for the ServerProtein class.
		/// </summary>
		/// <remarks>
		/// Call base constructor to ensure proper updates.
		/// </remarks>
		~ServerProtein()
		{
		}
		#endregion


		#region Member Variables
		private static readonly string __TableName = "proteins";

        /// <summary>
        /// The contains the data for the derived class table.  Data from
        /// the base class table is maintained by the server base class.
        /// </summary>
        protected DBRow __ProteinRow;
        #endregion


		#region Properties
		/// <summary>
		/// Get/set the Protein ID.
		/// </summary>
		public override Guid ID
		{
			get
			{
				return __ProteinRow.GetGuid("id");
			}
			set
			{
                base.ID = value; // (BE) update base class ID as well
                if (__ProteinRow != null)
                    __ProteinRow.SetGuid("id", value); 
            }
		}

		#endregion


		#region Methods
		/// <summary>
		/// Returns a representation of this object suitable for being
		/// sent to a client via SOAP.
		/// </summary>
		/// <returns>
		/// A SoapObject object capable of being passed via SOAP.
		/// </returns>
		public override SoapObject PrepareForSoap ( SoapObject derived )
		{
			SoapProtein retval = (derived == null) ? 
				retval = new SoapProtein() : retval = (SoapProtein)derived;

            // (BE) fill base class properties
            base.PrepareForSoap(retval);

			retval.ID   = this.ID;

			retval.Status = ObjectStatus.NoChanges;

			return retval;
		}

		/// <summary>
		/// Deletes the protein tuple from the proteins table and all the associated tables
		/// </summary>
		public override void Delete()
		{
			// (sfa) Delete from proteins
			DBWrapper.Instance.ExecuteNonQuery("DELETE FROM proteins WHERE id = @id"
				, "@id", SqlDbType.UniqueIdentifier, this.ID);

			base.Delete ();
		}
		/// <summary>
		/// Consumes a SoapObject object and updates the object
		/// from it.
		/// </summary>
		/// <param name="o">
		/// The SoapObject object to update from, potentially containing
		/// changes to the object.
		/// </param>
		protected override void UpdateFromSoap ( SoapObject o )
		{
  			// set base class properties
			base.UpdateFromSoap(o);

			SoapProtein bm = o as SoapProtein;

            // (BE) use the ID set in the base class or the new ID generated by the base class
            this.ID = base.ID;

		}

        /// <summary>
        /// Update the base class's data row, then the derived class's row
        /// </summary>
        public override void UpdateDatabase()
        {
            base.UpdateDatabase ();

			SetSqlCommandParameters();
            __ProteinRow.UpdateDatabase();
        }

		#region ADO.NET SqlCommands


		/// <summary>
		/// Required function for setting up the SqlCommands for ADO.NET.
		/// </summary>
		protected override void SetSqlCommandParameters ( )
		{
            // (BE) set commands for base class's DBRow
            base.SetSqlCommandParameters();

			// (GJS)
			// Rewrote using DBWrapper.Buildcommand

			__ProteinRow.ADOCommands["insert"] = DBWrapper.BuildCommand(
				"INSERT INTO " + __TableName + " (id) VALUES (@i_id);",
				"@i_id", SqlDbType.UniqueIdentifier, ID );

			__ProteinRow.ADOCommands["select"] = DBWrapper.BuildCommand(
				"SELECT * FROM " + __TableName + " WHERE id = @s_id;",
				"@s_id", SqlDbType.UniqueIdentifier, ID );

			// (bse)
			// I don't think there can be an UPDATE command for Protein
			//
			// (sfa) but it won't work without an update statement, so I wrote one that doesn't do anything. 
			__ProteinRow.ADOCommands["update"] = DBWrapper.BuildCommand(
				"UPDATE molecular_entities SET name = name WHERE id = @u_id;",
				"@u_id", SqlDbType.UniqueIdentifier, ID );

			__ProteinRow.ADOCommands["delete"] = DBWrapper.BuildCommand(
				"DELETE FROM " + __TableName + " WHERE id = @d_id;",
				"@d_id", SqlDbType.UniqueIdentifier, ID );
		}
		#endregion
		#endregion


		#region Static Methods
		/// <summary>
		/// Return all basic molecules from the system.
		/// </summary>
		/// <returns>
		/// Array of SoapProtein objects ready to be sent via SOAP.
		/// </returns>
		public static ServerProtein[] AllProteins ( )
		{
			SqlCommand command = new SqlCommand( "SELECT p.* FROM " + __TableName + " p INNER JOIN molecular_entities me ON p.[id] = me.[id] ORDER BY me.[name];" );
			
			DataSet[] ds = new DataSet[0];
			DBWrapper.LoadMultiple( out ds, ref command );

			ArrayList results = new ArrayList();
			foreach ( DataSet d in ds )
			{
				results.Add( new ServerProtein( new DBRow( d ) ) );
			}

			return ( ServerProtein[] ) results.ToArray( typeof( ServerProtein ) );
		}

		/// <summary>
		/// Returns all proteins who's name contains the given substring
		/// </summary>
		/// <param name="substring"></param>
		/// <param name="searchMethod"></param>
		/// <returns></returns>
		public static ServerProtein[] FindProteins(string substring, SearchMethod searchMethod)
		{
			if ( searchMethod == SearchMethod.Contains || searchMethod == SearchMethod.EndsWith ) substring = "%" + substring;
			if ( searchMethod == SearchMethod.Contains || searchMethod == SearchMethod.StartsWith ) substring += "%";

			SqlCommand command = DBWrapper.BuildCommand(
				@"SELECT r.*
					FROM " + __TableName + @" r
					INNER JOIN molecular_entities me ON r.id = me.id
					WHERE me.name " + ( searchMethod != SearchMethod.ExactMatch ? "LIKE" : "=" ) + @" @substring
					ORDER BY me.[name];",
				"@substring", SqlDbType.VarChar, substring );

			DataSet[] ds = new DataSet[0];
			DBWrapper.LoadMultiple( out ds, ref command );

			ArrayList results = new ArrayList();
			foreach ( DataSet d in ds )
			{
				results.Add( new ServerProtein( new DBRow( d ) ) );
			}

			return ( ServerProtein[] ) results.ToArray( typeof( ServerProtein ) );
		}

		/// <summary>
		/// Return a protein with given ID.
		/// </summary>
		/// <param name="id">
		/// The Guid of the desired protein.
		/// </param>
		/// <returns>
		/// SoapProtein object ready to be sent via SOAP.
		/// </returns>
		public new static ServerProtein Load ( Guid id )
		{
			return new ServerProtein( LoadRow ( id ) );
		}

        /// <summary>
        /// Constructs an object based on the rows of it's derived classes.
        /// </summary>
        /// <param name="geneProductRow"></param>
        /// <param name="molecularEntityRow"></param>
        /// <returns></returns>
        public static ServerProtein LoadFromBaseRow ( DBRow geneProductRow, DBRow molecularEntityRow )
        {
            Guid id = molecularEntityRow.GetGuid("id");
            ServerProtein p;
			if (ServerProtein.Exists(id))
			{
				p = new ServerProtein(LoadRow(id), geneProductRow, molecularEntityRow);
			}
			else
			{
				// save changes to inserted rows
				p = new ServerProtein(CreateFromGeneProduct(geneProductRow, molecularEntityRow), geneProductRow, molecularEntityRow);
				p.UpdateDatabase();
			}
            return p;

        }

		/// <summary>
		/// Return the dataset row for a protein with a given ID.
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		private new static DBRow LoadRow ( Guid id )
		{
			SqlCommand command = new SqlCommand( "SELECT * FROM " + __TableName + " WHERE id = @id;" );
			SqlParameter ident = new SqlParameter( "@id", SqlDbType.UniqueIdentifier );
			ident.SourceVersion = DataRowVersion.Original;
			ident.Value = id;
			command.Parameters.Add( ident );

			DataSet ds = new DataSet();
			DBWrapper.LoadSingle( out ds, ref command );
			return new DBRow(ds);
		}

        /// <summary>
        /// Returns true if a item exists in the database with the given ID.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public new static bool Exists( Guid id )
        {
            SqlCommand command = DBWrapper.BuildCommand(
                "SELECT * FROM " + __TableName + " WHERE id = @id;",
                "@id", SqlDbType.UniqueIdentifier, id);

            DataSet[] ds;
            if (DBWrapper.LoadMultiple(out ds, ref command) < 1)
                return false;
            return true;
        }

        /// <summary>
        /// Hack used to fix database anomolies where the base object rows exist, but the derived class rows do not.
        /// </summary>
        /// <param name="molecularEntityRow"></param>
        /// <param name="geneProductRow"></param>
        /// <returns></returns>
        public static DBRow CreateFromMolecularEntity(DBRow molecularEntityRow, out DBRow geneProductRow)
        {
            geneProductRow = ServerGeneProduct.CreateFromMolecularEntity(molecularEntityRow);

            return CreateFromGeneProduct(geneProductRow, molecularEntityRow);
        }

        /// <summary>
        /// Hack used to fix database anomolies where the base object rows exist, but the derived class rows do not.
        /// </summary>
        /// <param name="geneProductRow"></param>
        /// <param name="molecularEntityRow"></param>
        /// <returns></returns>
        public static DBRow CreateFromGeneProduct(DBRow geneProductRow, DBRow molecularEntityRow)
        {
            if (geneProductRow.GetGuid("id") != molecularEntityRow.GetGuid("id"))
                throw new DataModelException("CreateFromGeneProduct failed since the gene product and molecular entity rows had different ID's!");

            // create the new row in the protein table, using the ID from the other rows to fix 
            DBRow proteinRow = new DBRow( __TableName );

            // set row values
            proteinRow.SetGuid("id", geneProductRow.GetGuid("id"));

            // save changes -- moved to LoadFromBaseRow
            //proteinRow.UpdateDatabase();

            return proteinRow;
        }

		#endregion

	} // End class

} // End namespace


#region Change Log
//----------------------------- END OF SOURCE ----------------------------

/*------------------------------- Change Log -----------------------------
	$Id: ServerProtein.cs,v 1.1 2008/05/16 21:15:53 mustafa Exp $
	$Log: ServerProtein.cs,v $
	Revision 1.1  2008/05/16 21:15:53  mustafa
	*** empty log message ***
	
	Revision 1.2  2008/03/13 19:42:52  divya
	*** empty log message ***
	
	Revision 1.1  2006/07/31 19:37:43  greg
	Ported from VS7 to VS8.  The system should compile, but there are definitely issues with the site that are still at large.
	
	Revision 1.18  2006/05/23 18:29:32  greg
	Many old SQL queries were updated/optimized, and a bug that causes the system to crash when trying to navigate after viewing the details of an object through the Java applet is also fixed.  This required some semi-substantial modifications to LinkHelper.cs and SearchPagination.ascx.cs to allow for a slightly different method of dealing with query parameters.
	
	Revision 1.17  2006/05/18 19:01:47  greg
	 - Pathway menu expansion
	When going through the pathways menu in the control bar, the menu that should be open isn't.  Now it is.
	
	 - SQL injection stuff
	More queries were rewritten to prevent SQL injection, and some were also rewritten to be a little more aesthetically pleasing.
	
	 - Finding SQL bugs
	SQL bugs that have arisen as a result of schema changes are still being checked for.  Any that I find are being sent to Ali for rewriting and reintegration.
	
	Revision 1.16  2006/05/10 02:40:17  ali
	Server Objects have been modified to make them compliant with the recent schema changes concerning the addition of several entity_type tables into the database.
	
	Revision 1.15  2005/10/31 19:25:11  fatih
	*** empty log message ***
	
	Revision 1.14  2005/10/31 06:10:17  fatih
	*** empty log message ***
	
	Revision 1.13  2005/08/01 16:32:31  brandon
	added "ORDER BY name" clause to the All... and Find... functions in the server objects
	
	Revision 1.12  2005/07/29 20:48:25  brandon
	added an "ORDER BY name" clause to some "GetAll" functions
	
	Revision 1.11  2005/07/27 22:16:25  brandon
	Added find (search by substring) functions in ServerPathway and ServerProcess.  Fixed the find function in the others ( the 'Ends with' query was wrong )
	
	Revision 1.10  2005/07/19 18:15:36  brandon
	Added a bunch of XML comments, also changed get all processes for pathway function to remove duplicates
	
	Revision 1.9  2005/07/18 19:18:12  brandon
	Added another test file, Brendan fixed his Protein table fix thing, and added a query to geneProducts to override the GetAllPathways in ServerMolecularEntity
	
	Revision 1.8  2005/07/15 22:28:00  brendan
	Fix to automatically generate missing protein table entries from entries in molecular entities.
	
	Revision 1.7  2005/07/15 21:02:00  brandon
	added more queries
	
	Revision 1.6  2005/07/15 17:42:47  michael
	Debugging Pathway Details display exception
	
	Revision 1.5  2005/07/13 16:41:45  brandon
	Added a bunch of XML comments where they were missing.
	Changed ServerCatalyze so that it loads a single object from a given ec number instead of an array.
	
	Revision 1.4  2005/07/12 04:03:22  brandon
	Updated ServerRNA and SoapRNA to mimic the Protein objects for inheritance.
	
	Revision 1.3  2005/07/11 22:28:57  brendan
	Added inheritance support for GeneProduct and Protein, but they are not fully tested yet.
	
	Revision 1.2  2005/07/08 20:36:39  brandon
	changed LoadDataSet to LoadRow in all the Server objects
	
	Revision 1.1  2005/06/30 21:07:33  brandon
	ServerProtein class added
	
	Revision 1.1  2005/06/30 19:46:32  brandon
	added a bunch of new classes for all the boxed on the ER diagram, even the ones that only have an id attribute
	

		
------------------------------------------------------------------------*/
#endregion