#region Using Declarations
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

using PathwaysLib.SoapObjects;
using PathwaysLib.ServerObjects;
using PathwaysLib.Exceptions;
using PathwaysLib.GraphObjects;
#endregion

namespace PathwaysLib.ServerObjects
{	
	
	#region Document Comments
	/// <sourcefile>
	///		<project>Pathways</project>
	///		<filepath>PathwaysLib/Server/ServerBasicMolecule.cs</filepath>
	///		<creation>2005/06/30</creation>
	///		<author>
	///			<name>Brendan Elliott</name>
	///			<initials>BE</initials>
	///			<email>bxe7@cwru.edu</email>
	///		</author>
	///		<contributors>
	///			<contributor>
	///				<name>Michael F. Starke</name>
	///				<initials>mfs</initials>
	///				<email>michael.starke@case.edu</email>
	///			</contributor>
	///			<contributor>
	///				<name>Brandon Evans</name>
	///				<initials>bse</initials>
	///				<email>brandon.evans@case.edu</email>
	///			</contributor>
	///			<contributor>
	///				<name>Suleyman Fatih Akgul</name>
	///				<initials>sfa</initials>
	///				<email>fatih@case.edu</email>
	///			</contributor>
	///			<contributor>
	///				<name>Gokhan Yavas</name>
	///				<initials>gy</initials>
	///				<email>gokhan.yavas@case.edu</email>
	///			</contributor>
	///		</contributors>
	///		<cvs>
	///			<cvs_author>$Author: akaraca $</cvs_author>
	///			<cvs_date>$Date: 2008/06/17 15:38:46 $</cvs_date>
	///			<cvs_header>$Header: /var/lib/cvs/PathCase_SystemsBiology/PathwaysLib/ServerObjects/ServerBasicMolecule.cs,v 1.2 2008/06/17 15:38:46 akaraca Exp $</cvs_header>
	///			<cvs_branch>$Name:  $</cvs_branch>
	///			<cvs_revision>$Revision: 1.2 $</cvs_revision>
	///		</cvs>
	///</sourcefile>
	/// <summary>
	/// Encapsulates database access related to basic molecules.
	/// </summary>
	#endregion
    public class ServerBasicMolecule : ServerMolecularEntity, IGraphBasicMolecule
	{

		#region Constructor, Destructor, ToString
		/// <summary>
		/// Default constructor
		/// </summary>
		private ServerBasicMolecule ( )
		{
		}

//(AC) never worked
//		/// <summary>
//		/// Creation constructor
//		/// </summary>
//		/// <param name="name"></param>
//		/// <param name="molecular_entity_notes"></param>
//		public ServerBasicMolecule (string name, string molecular_entity_notes)
//			:base(name, "basic_molecules", molecular_entity_notes)
//		{
//			// not yet in DB, so create empty row
//			__BasicMoleculeRow = new DBRow( __TableName );
//	        
//			this.ID = base.ID; // get ID generated by base class
//		}

		/// <summary>
		/// Constructor for server basic molecule wrapper.
		/// </summary>
		/// <remarks>
		/// This constructor creates a ServerBasicMolecule object from a
		/// SoapBasicMolecule object.
		/// </remarks>
		/// <param name="data">
		/// A SoapBasicMolecule object from which to construct the
		/// ServerBasicMolecule object.
		/// </param>
		public ServerBasicMolecule ( SoapBasicMolecule data )
			: base ( (SoapMolecularEntity)data, "basic_molecules")
		{
			
			// (BE) setup database row
			switch(data.Status)
			{
				case ObjectStatus.Insert:
					// not yet in DB, so create empty row
					__BasicMoleculeRow = new DBRow( __TableName );
					break;
				case ObjectStatus.ReadOnly:
				case ObjectStatus.Update:
				case ObjectStatus.NoChanges:
					// need to load existing row first so update works properly
					__BasicMoleculeRow = LoadRow(data.ID);
					break;
				default:
					throw new DataModelException("Cannot create ServerObject from invalid SoapObject.");
			}

			// (BE) get potential updates from Soap object, unless it's supposed to be read only
			if (data.Status != ObjectStatus.ReadOnly)
				UpdateFromSoap(data);


		}

		/// <summary>
		/// Constructor for server basic molecule wrapper.
		/// </summary>
		/// <remarks>
		/// This constructor creates a ServerBasicMolecule object from a
		/// DBRow.
		/// </remarks>
		/// <param name="basicMoleculeRow">
		/// DataSet to load into the object.
		/// </param>
		public ServerBasicMolecule ( DBRow basicMoleculeRow ) 
			: base ( ServerMolecularEntity.LoadRow(basicMoleculeRow.GetGuid("id") ) )
		{
			// (mfs)
			// setup object
			__BasicMoleculeRow = basicMoleculeRow ;
		}

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="basicMoleculeRow"></param>
		/// <param name="molecularEntityRow"></param>
		public ServerBasicMolecule ( DBRow basicMoleculeRow, DBRow molecularEntityRow ) 
			: base ( molecularEntityRow )
		{
			// (mfs)
			// setup object
			__BasicMoleculeRow = basicMoleculeRow;
		}

		/// <summary>
		/// Destructor for the ServerBasicMolecule class.
		/// </summary>
		/// <remarks>
		/// Call base constructor to ensure proper updates.
		/// </remarks>
		~ServerBasicMolecule()
		{
		}
		#endregion


		#region Member Variables
		private static readonly string __TableName = "basic_molecules";
		
		/// <summary>
		/// This contains the data for the derived class table.  Data from
		/// the base class table is maintained by the server base class.
		/// </summary>
		protected DBRow __BasicMoleculeRow;
		private bool __isCommon = false; // false = no row in DB
		private bool commonLoaded = false;
		private bool commonDirty = false;
		#endregion


		#region Properties
		/// <summary>
		/// Get/set the BasicMolecule ID.
		/// </summary>
		public override Guid ID
		{
			get
			{
				return __BasicMoleculeRow.GetGuid("id");
			}
			set
			{
				base.ID = value; // (BE) update base class ID as well
				if (__BasicMoleculeRow != null)
					__BasicMoleculeRow.SetGuid("id", value); 
			}
		}

		/// <summary>
		/// Get/set whether the molecule is common or not.  This wraps the common_molecules database table.
		/// </summary>
		public bool IsCommon
		{
			get
			{
				if (!commonLoaded)
					LoadIsCommon();
				return __isCommon;
			}
			set
			{
				if (!commonLoaded)
					LoadIsCommon();

				if (__isCommon != value)
				{
					__isCommon = value;
					commonDirty = true;
				}
			}
		}

		private void LoadIsCommon()
		{
			__isCommon = IsCommonMolecule(this.ID);
		}

		#endregion


		#region Methods
		/// <summary>
		/// Returns a representation of this object suitable for being
		/// sent to a client via SOAP.
		/// </summary>
		/// <returns>
		/// A SoapObject object capable of being passed via SOAP.
		/// </returns>
		public override SoapObject PrepareForSoap ( SoapObject derived )
		{
			SoapBasicMolecule retval = (derived == null) ? 
				retval = new SoapBasicMolecule() : retval = (SoapBasicMolecule)derived;

			// (BE) fill base class properties
			base.PrepareForSoap(retval);

			retval.ID   = this.ID;
			retval.IsCommon = this.IsCommon;

			retval.Status = ObjectStatus.NoChanges;

			return retval;
		}

        /// <summary>
        /// Deletes this basic molecule.
        /// </summary>
		public override void Delete()
		{
			// (sfa) Delete the basic_molecules tuples
			DBWrapper.Instance.ExecuteNonQuery("DELETE FROM basic_molecules WHERE id = @id"
				, "@id", SqlDbType.UniqueIdentifier, this.ID);

			base.Delete ();
		}


		/// <summary>
		/// Consumes a SoapObject object and updates the object
		/// from it.
		/// </summary>
		/// <param name="o">
		/// The SoapObject object to update from, potentially containing
		/// changes to the object.
		/// </param>
		protected override void UpdateFromSoap ( SoapObject o )
		{
			// set base class properties
			base.UpdateFromSoap(o);

			SoapBasicMolecule bm = o as SoapBasicMolecule;

			// (BE) use the ID set in the base class or the new ID generated by the base class
			this.ID = base.ID;

			this.IsCommon = bm.IsCommon;

		}

		/// <summary>
		/// Update the base class's data row, then the derived class's row
		/// </summary>
		public override void UpdateDatabase()
		{
			base.UpdateDatabase ();
			__BasicMoleculeRow.UpdateDatabase();

			if (commonDirty)
				SetCommonMolecule(this.ID, __isCommon);
		}

		#region ADO.NET SqlCommands


		/// <summary>
		/// Required function for setting up the SqlCommands for ADO.NET.
		/// </summary>
		protected override void SetSqlCommandParameters ( )
		{
			// (mfs)
			// add the INSERT command
			SqlCommand Insert = new SqlCommand( "INSERT INTO " + __TableName + " (id) VALUES (@i_id);" );
			SqlParameter i_id = new SqlParameter( "@i_id", SqlDbType.UniqueIdentifier, 32, "id" );
			i_id.Value = ID;
			Insert.Parameters.Add( i_id );
			__BasicMoleculeRow.ADOCommands["insert"] = Insert;

			// (mfs)
			// add the SELECT command
			SqlCommand Select = new SqlCommand( "SELECT * FROM " + __TableName + " WHERE id = @s_id;" );
			SqlParameter s_id = new SqlParameter( "@s_id", SqlDbType.UniqueIdentifier, 32, "id");
			s_id.SourceVersion = DataRowVersion.Original;
			s_id.Value = ID;
			Select.Parameters.Add( s_id );
			__BasicMoleculeRow.ADOCommands["select"] = Select;

			// (bse)
			// I don't think there can be an UPDATE command for BasicMolecule
			//
			// (sfa) but it won't work without an update statement, so I wrote one that doesn't do anything. 
			SqlCommand Update = new SqlCommand( "UPDATE molecular_entities SET name=name WHERE id = @u_id;" );
			SqlParameter u_id = new SqlParameter( "@u_id", SqlDbType.UniqueIdentifier, 32, "id");
			u_id.SourceVersion = DataRowVersion.Original;
			u_id.Value = ID;
			Update.Parameters.Add( u_id );
			__BasicMoleculeRow.ADOCommands["update"] = Update;

			// (mfs)
			// add the DELETE command
			SqlCommand Delete = new SqlCommand ( "DELETE FROM " + __TableName + " WHERE id = @d_id;" );
			SqlParameter d_id = new SqlParameter( "@d_id", SqlDbType.UniqueIdentifier, 32, "id");
			d_id.SourceVersion = DataRowVersion.Original;
			d_id.Value = ID;
			Delete.Parameters.Add( d_id );
			__BasicMoleculeRow.ADOCommands["delete"] = Delete;


			// (BE) set commands for base class's DBRow
			base.SetSqlCommandParameters();
		}
		#endregion
		#endregion


		#region Static Methods
		/// <summary>
		/// Return all basic molecules from the system.
		/// </summary>
		/// <returns>
		/// Array of SoapBasicMolecule objects ready to be sent via SOAP.
		/// </returns>
		public static ServerBasicMolecule[] AllBasicMolecules ( )
		{
			SqlCommand command = new SqlCommand( "SELECT bm.* FROM " + __TableName + " bm INNER JOIN molecular_entities me ON bm.[id] = me.[id] ORDER BY me.[name];" );
			
			DataSet[] ds = new DataSet[0];
			DBWrapper.LoadMultiple( out ds, ref command );

			ArrayList results = new ArrayList();
			foreach ( DataSet d in ds )
			{
				results.Add( new ServerBasicMolecule( new DBRow( d ) ) );
			}

			return ( ServerBasicMolecule[] ) results.ToArray( typeof( ServerBasicMolecule ) );
		}


		/// <summary>
		/// Return all common molecules from the system
		/// </summary>
		/// <returns>An array of ServerBasicMolecule objects (where all objects are common molecules)</returns>
		public static ServerBasicMolecule[] AllCommonMolecules()
		{
			SqlCommand command = new SqlCommand( "SELECT bm.* FROM " + __TableName + " bm INNER JOIN molecular_entities me ON bm.[id] = me.[id] ORDER BY me.[name];" );
			
			DataSet[] ds = new DataSet[0];
			DBWrapper.LoadMultiple( out ds, ref command );

			ArrayList results = new ArrayList();
			foreach ( DataSet d in ds )
			{
				results.Add( new ServerBasicMolecule( new DBRow( d ) ) );
			}

			return ( ServerBasicMolecule[] ) results.ToArray( typeof( ServerBasicMolecule ) );
		}

		/// <summary>
		/// Returns true if the basic_molecule_id is in the basic_molecules table,
		/// otherwise returns false
		/// </summary>
		/// <param name="basic_molecule_id"></param>
		/// <returns></returns>
		public new static bool Exists(Guid basic_molecule_id)
		{
			SqlCommand command = DBWrapper.BuildCommand(
				"SELECT * FROM " + __TableName + " WHERE id = @id;",
				"@id", SqlDbType.UniqueIdentifier, basic_molecule_id);

			DataSet[] ds;
			if (DBWrapper.LoadMultiple(out ds, ref command) < 1)
				return false;
			return true;
		}

		/// <summary>
		/// Returns all basic molecules who's name contains the given substring
		/// </summary>
		/// <param name="substring"></param>
		/// <param name="searchMethod"></param>
		/// <returns></returns>
		public static ServerBasicMolecule[] FindBasicMolecules(string substring, SearchMethod searchMethod)
		{
			string commandString;

			switch(searchMethod)
			{
				case SearchMethod.Contains:
					commandString = "SELECT bm.* FROM " + __TableName + " bm INNER JOIN molecular_entities me ON bm.id = me.id WHERE me.name LIKE '%" + substring + "%' ORDER BY me.[name];";
					break;
				case SearchMethod.EndsWith:
					commandString = "SELECT bm.* FROM " + __TableName + " bm INNER JOIN molecular_entities me ON bm.id = me.id WHERE me.name LIKE '%" + substring + "' ORDER BY me.[name];";
					break;
				case SearchMethod.ExactMatch:
					commandString = "SELECT bm.* FROM " + __TableName + " bm INNER JOIN molecular_entities me ON bm.id = me.id WHERE me.name = '" + substring + "' ORDER BY me.[name];";
					break;
				case SearchMethod.StartsWith:
				default:
					commandString = "SELECT bm.* FROM " + __TableName + " bm INNER JOIN molecular_entities me ON bm.id = me.id WHERE me.name LIKE '" + substring + "%' ORDER BY me.[name];";
					break;
			}

			SqlCommand command = DBWrapper.BuildCommand( commandString );
			DataSet[] ds = new DataSet[0];
			DBWrapper.LoadMultiple( out ds, ref command );

			ArrayList results = new ArrayList();
			foreach ( DataSet d in ds )
			{
				results.Add( new ServerBasicMolecule( new DBRow( d ) ) );
			}

			return ( ServerBasicMolecule[] ) results.ToArray( typeof( ServerBasicMolecule ) );
		}

		#region Common Molecules

		/// <summary>
		/// returns true if the id is found in the common_molecules table,
		/// if not then it returns false
		/// </summary>
		/// <param name="basicMoleculeId"></param>
		/// <returns></returns>
		public static bool IsCommonMolecule(Guid basicMoleculeId)
		{
			SqlCommand command = DBWrapper.BuildCommand(
				"SELECT * FROM common_molecules WHERE id = @id;",
				"@id", SqlDbType.UniqueIdentifier, basicMoleculeId);

			DataSet[] ds;
			if (DBWrapper.LoadMultiple(out ds, ref command) < 1)
				return false;
			return true;
		}

		/// <summary>
		/// Returns all the basic molecule who's id is in the common_molecules table
		/// </summary>
		/// <returns></returns>
		public static ServerBasicMolecule[] GetAllCommonMolecules()
		{
            //SqlCommand command = new SqlCommand( "SELECT * FROM common_molecules;" );
			
            //DataSet[] ds = new DataSet[0];
            //DBWrapper.LoadMultiple( out ds, ref command );

            //ArrayList results = new ArrayList();
            //foreach ( DataSet d in ds )
            //{
            //    results.Add( new ServerBasicMolecule( new DBRow( d ) ).__isCommon = true );
            //}

            //return ( ServerBasicMolecule[] ) results.ToArray( typeof( ServerBasicMolecule ) );

            return (ServerBasicMolecule[])(SelectMolecularEntities("common_molecules cm", "m.id = cm.id").ToArray());
		}

		/// <summary>
		/// Depending if value is true or false, the id is entered into or removed from
		///  the common_molecules table
		/// </summary>
		/// <param name="basicMoleculeId"></param>
		/// <param name="value"></param>
		public static void SetCommonMolecule(Guid basicMoleculeId, bool value)
		{
			bool isCommon = IsCommonMolecule(basicMoleculeId);

			if (isCommon == value)
				return;
			if (value == true)
			{
				DBWrapper.Instance.ExecuteNonQuery(				
					"INSERT INTO common_molecules ( id ) VALUES ( @id );",
					"@id", SqlDbType.UniqueIdentifier, basicMoleculeId );
			}
			else
			{
				DBWrapper.Instance.ExecuteNonQuery(				
					"DELETE FROM common_molecules WHERE id = @id;",
					"@id", SqlDbType.UniqueIdentifier, basicMoleculeId );
			}
		}

		#endregion

		/// <summary>
		/// Return a basic molecule with given ID.
		/// </summary>
		/// <param name="id">
		/// The Guid of the desired basic molecule.
		/// </param>
		/// <returns>
		/// SoapBasicMolecule object ready to be sent via SOAP.
		/// </returns>
		public new static ServerBasicMolecule Load ( Guid id )
		{
			return new ServerBasicMolecule( LoadRow ( id ) );
		}

		/// <summary>
		/// Given a row from the base class, calls LoadRow on the base class id
		/// </summary>
		/// <param name="molecularEntityRow"></param>
		/// <returns></returns>
		public static ServerBasicMolecule LoadFromBaseRow ( DBRow molecularEntityRow )
		{
			return new ServerBasicMolecule(LoadRow(molecularEntityRow.GetGuid("id")), molecularEntityRow);
		}

		/// <summary>
		/// Return the dataset for a basic molecule with a given ID.
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		protected new static DBRow LoadRow ( Guid id )
		{
			SqlCommand command = new SqlCommand( "SELECT * FROM " + __TableName + " WHERE id = @id;" );
			SqlParameter ident = new SqlParameter( "@id", SqlDbType.UniqueIdentifier );
			ident.SourceVersion = DataRowVersion.Original;
			ident.Value = id;
			command.Parameters.Add( ident );

			DataSet ds = new DataSet();
			DBWrapper.LoadSingle( out ds, ref command );

			return new DBRow( ds );
		}
		#endregion


        /// <summary>
        /// Finds out the data source of the molecular entity whoe id is given as the parameter
        /// Since the database table is not ready yet, I had to decide whether an entity is a kegg entity checking
        /// the id of the entity if exists in external_database_links and the external_database is 1, biomodel.
        /// But, we had decided to put every entity in external dabase_links table and I would decide checking the external_database
        /// id. But, currently, all entities have this field as '1'. - ahmet
        /// </summary>
        /// <param name="molid">id of the entity</param>
        /// <returns></returns>
        internal static string WhatIsTheSource(string molid)
        {
            string queryString1 = @"select mer.model_entity
                                    from molecular_entity_relationship mer
                                    where  (mer.model_entity = @molid or mer.pathway_entity = @molid)
                                            and mer.relationship_id='1';"; // common

            string queryString2 = @"select local_id
                                    from external_database_links
                                    where local_id = @molid;"; // came from not Kegg DB

            SqlCommand com = DBWrapper.BuildCommand(queryString1, "@molid", SqlDbType.UniqueIdentifier, new Guid(molid));
            DataSet[] ds1 = new DataSet[0];
            DBWrapper.LoadMultiple(out ds1, ref com);

            DataSet[] ds2 = new DataSet[0];
            com.CommandText = queryString2;
            DBWrapper.LoadMultiple(out ds2, ref com);


            if (ds1.Length == 0 && ds2.Length > 0)
                return "biomodel";
            else if (ds1.Length == 0 && ds2.Length == 0)
                return "kegg";
            else
                return "common";
        }
    } // End class

} // End namespace


#region Change Log
//----------------------------- END OF SOURCE ----------------------------

/*------------------------------- Change Log -----------------------------
	$Id: ServerBasicMolecule.cs,v 1.2 2008/06/17 15:38:46 akaraca Exp $
	$Log: ServerBasicMolecule.cs,v $
	Revision 1.2  2008/06/17 15:38:46  akaraca
	graph drawing coloring information is now sent to the client
	
	Revision 1.1  2008/05/16 21:15:53  mustafa
	*** empty log message ***
	
	Revision 1.3  2006/10/19 21:03:36  brendan
	New graph drawing code ... performs bulk-loading of server objects to reduce the number of queries and filling an object cache.  Also provides an interface for alternative data sources (i.e. XML biopax doc).  Other misc bug fixes.
	
	Revision 1.2  2006/10/03 17:47:44  brendan
	*** empty log message ***
	
	Revision 1.1  2006/07/31 19:37:43  greg
	Ported from VS7 to VS8.  The system should compile, but there are definitely issues with the site that are still at large.
	
	Revision 1.18  2006/05/23 18:29:32  greg
	Many old SQL queries were updated/optimized, and a bug that causes the system to crash when trying to navigate after viewing the details of an object through the Java applet is also fixed.  This required some semi-substantial modifications to LinkHelper.cs and SearchPagination.ascx.cs to allow for a slightly different method of dealing with query parameters.
	
	Revision 1.17  2006/05/11 15:47:20  brendan
	Removed remaining SearchMethod magic strings; refactored OrgMeta back into ServerOrganismGroup, fixed many PathwaysLib warnings.
	
	Revision 1.16  2006/05/10 02:40:17  ali
	Server Objects have been modified to make them compliant with the recent schema changes concerning the addition of several entity_type tables into the database.
	
	Revision 1.15  2006/04/12 20:20:27  brian
	*** empty log message ***
	
	Revision 1.14.8.1  2006/04/06 00:16:25  brian
	Making some quick fixes to prepare for merge back into main branch
	
	Revision 1.14  2005/11/07 17:28:26  brendan
	New generic graph building code, exposed via a new web service call.
	
	Revision 1.13  2005/10/31 06:10:17  fatih
	*** empty log message ***
	
	Revision 1.12  2005/10/31 00:39:36  fatih
	*** empty log message ***
	
	Revision 1.11  2005/08/24 22:27:52  michael
	Fixing SQL Connection Overflow bug
	
	Revision 1.10  2005/08/01 16:32:31  brandon
	added "ORDER BY name" clause to the All... and Find... functions in the server objects
	
	Revision 1.9  2005/07/27 22:16:25  brandon
	Added find (search by substring) functions in ServerPathway and ServerProcess.  Fixed the find function in the others ( the 'Ends with' query was wrong )
	
	Revision 1.8  2005/07/26 20:06:38  michael
	updating control bar for process list content
	
	Revision 1.7  2005/07/19 18:15:36  brandon
	Added a bunch of XML comments, also changed get all processes for pathway function to remove duplicates
	
	Revision 1.6  2005/07/18 19:18:12  brandon
	Added another test file, Brendan fixed his Protein table fix thing, and added a query to geneProducts to override the GetAllPathways in ServerMolecularEntity
	
	Revision 1.5  2005/07/15 21:02:00  brandon
	added more queries
	
	Revision 1.4  2005/07/15 14:30:43  brandon
	Added ECNumberName objects and made changes to ServerECNumber for name lookups.
	Also added functions for common molecules in BasicMolecule objects
	
	Revision 1.3  2005/07/13 22:14:12  brandon
	bug fixes, updated ServerBasicMolecule for inheritance, but it's not finished so don't use it yet.
	
	Revision 1.2  2005/07/08 20:36:39  brandon
	changed LoadDataSet to LoadRow in all the Server objects
	
	Revision 1.1  2005/06/30 19:46:32  brandon
	added a bunch of new classes for all the boxed on the ER diagram, even the ones that only have an id attribute
	

		
------------------------------------------------------------------------*/
#endregion